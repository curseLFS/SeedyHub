@page "/employee"
@inject IPeopleService PeopleService
@inject NavigationManager NavigationManager

<PageTitle>Employee</PageTitle>

<div class="container" style="margin-top: 60px;">
    <div class="row align-items-start">
        <div class="col-4">
            <h3>Register</h3>
            <EditForm Model="member" OnSubmit="HandleSubmit">      
                <DataAnnotationsValidator />     
                <MudCard>
                    <MudCardContent>
                        <MudTextField Label="First Name" @bind-Value="member.FirstName" For="@(() => member.FirstName)"></MudTextField>
                        <MudTextField Label="Last Name" @bind-Value="member.LastName" For="@(() => member.LastName)"></MudTextField>
                        <MudTextField Label="Suffix" @bind-Value="member.Suffix"></MudTextField>
                        <MudDatePicker Label="Birth Date" @bind-Date="member.Birthday"></MudDatePicker>
                        <MudSelect Label="Role" @bind-Value="member.RoleId">
                            @foreach (var role in PeopleService.roles)
                            {
                                <MudSelectItem Value="role.RoleId">@role.RoleName</MudSelectItem>
                            }
                        </MudSelect>                                                  
                    </MudCardContent>
                </MudCard>
                <MudButton ButtonType="ButtonType.Submit" Class="mr-4 mt-4">@btnText</MudButton>
            </EditForm>
        </div>

        <div class="col-md-6 offset-md-2">
            <h3>Employee</h3>
            <MudTable Items="PeopleService.members" Hover="true" Striped="true" Dense="true" Class="mb-2" @ref="@_table" 
                      RowsPerPage="5" Breakpoint="Breakpoint.Sm" LoadingProgressColor="Color.Info">
                <HeaderContent>
                    <MudTh>First Name</MudTh>
                    <MudTh>Last Name</MudTh>
                     <MudTh>Suffix</MudTh>
                      <MudTh>Birth Date</MudTh>
                    <MudTh>Role</MudTh>
                    <MudTh>Accepted</MudTh>
                    <MudTh></MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="First Name">@context.FirstName</MudTd> 
                    <MudTd DataLabel="Last Name">@context.LastName</MudTd> 
                    <MudTd DataLabel="Suffix">@context.Suffix</MudTd> 
                    <MudTd DataLabel="Birth Date">@context.Birthday</MudTd> 
                    <MudTd DataLabel="Role Name">@context.Role.RoleName</MudTd> 
                    <MudTd DataLabel="Accepted">@context.Accepted</MudTd> 
                    <MudTd DataLabel="Edit">
                        <MudIconButton OnClick="(() => ShowMember(context.MemberId))" Icon="@Icons.Material.Filled.Edit" Color="MudBlazor.Color.Primary" Variant="Variant.Filled"></MudIconButton>                        
                    </MudTd>
                     <MudTd DataLabel="Delete">
                        <MudIconButton OnClick="(() => DeleteMember(context.MemberId))" Icon="@Icons.Material.Filled.Delete" Color="MudBlazor.Color.Error" Variant="Variant.Filled"></MudIconButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4"/>
                </PagerContent>
             </MudTable>
        </div>      
    </div>
</div>

@code
{
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    Members member = new Members { Role = new Role() };

    private MudTable<Members> _table;
    private IEnumerable<Members> _elements = new List<Members>();

    protected override async Task OnInitializedAsync()
    {
        btnText = Id == null ? "Register New Member" : "Update Member";

        await PeopleService.GetMembers();
        await PeopleService.GetRoles();
    }

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

    void ShowMember(int id)
    {
        NavigationManager.NavigateTo($"member/{id}");
    }

    void MemberRegistration()
    {
        NavigationManager.NavigateTo("/employee");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            member.Role = PeopleService.roles[0];
            member.RoleId = member.Role.RoleId;
        }
        else
        {
            member = await PeopleService.GetSingleMember((int)Id);
        }
    }

    async Task HandleSubmit()
    {
        if (Id == null)
        {
            await PeopleService.MemberRegistration(member);
        }
        else
        {
            await PeopleService.UpdateMember(member);
        }
    }

    async Task DeleteMember(int id)
    {
        await PeopleService.DeleteMember(id);
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var resizedImage = await e.File.RequestImageFileAsync(format, 200, 200);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64, {Convert.ToBase64String(buffer)}";
        // member.Image = imageData;
    }
}